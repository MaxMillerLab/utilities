name: Sandbox Claude Run
command: |
  #!/bin/bash
  set -e
  
  # Color codes for output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  NC='\033[0m' # No Color
  
  # Function to get repo name from current directory
  get_repo_name() {
    basename "$(git rev-parse --show-toplevel 2>/dev/null)" 2>/dev/null
  }
  
  # Function to get datastore target based on repo
  get_datastore_target() {
    case "$1" in
      "foreign_influence") echo "$DB/current_projects/foreign_influence/" ;;
      "propaganda") echo "$DB/current_projects/propaganda/" ;;
      "peps") echo "$DB/current_projects/PEPs/reorganization/" ;;
      "colonialism") echo "$DB/current_projects/Colonialism/empirics/data/" ;;
      "health") echo "$DB/current_projects/Health/Empirics/data/" ;;
      "interest_rate_risk") echo "$DB/current_projects/interest_rate_risk/" ;;
      "fara") echo "$DB/current_projects/fara/" ;;
      "finance_and_dev") echo "$DB/current_projects/Finance and Development/data" ;;
      "inventory") echo "$DB/current_projects/Inventory/rfs_revision/empirics/data/" ;;
      "democracy") echo "$DB/current_projects/Finance History/datastore/" ;;
      *) return 1 ;;
    esac
  }
  
  # Check if we're in a git repository
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
  fi
  
  # Get repo root and name
  REPO_ROOT=$(git rev-parse --show-toplevel)
  REPO_NAME=$(get_repo_name)
  
  echo -e "${GREEN}Repository: $REPO_NAME${NC}"
  echo -e "${GREEN}Repository root: $REPO_ROOT${NC}"
  
  # Get datastore target
  DATASTORE_TARGET=$(get_datastore_target "$REPO_NAME")
  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Unknown repository '$REPO_NAME'${NC}"
    echo "Please add this repository to the datastore map"
    exit 1
  fi
  
  echo -e "${GREEN}Datastore target: $DATASTORE_TARGET${NC}"
  
  # Change to repo root
  cd "$REPO_ROOT"
  
  # Step 1: Check if datastore exists and is a symlink
  if [ -L "datastore" ]; then
    echo -e "${YELLOW}Found datastore symlink, removing...${NC}"
    rm datastore
  elif [ -d "datastore" ]; then
    echo -e "${RED}Warning: datastore exists but is not a symlink!${NC}"
    echo "Do you want to remove it? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
      rm -rf datastore
    else
      echo "Aborting..."
      exit 1
    fi
  fi
  
  # Step 2: Create datastore directory
  echo -e "${YELLOW}Creating local datastore directory...${NC}"
  mkdir -p datastore
  
  # Step 3: Check datastore size and copy files
  if [ -d "$DATASTORE_TARGET" ]; then
    echo -e "${YELLOW}Checking datastore size...${NC}"
    DATASTORE_SIZE=$(du -sh "$DATASTORE_TARGET" 2>/dev/null | cut -f1)
    DATASTORE_SIZE_BYTES=$(du -sb "$DATASTORE_TARGET" 2>/dev/null | cut -f1)
    
    echo -e "Datastore size: ${GREEN}$DATASTORE_SIZE${NC}"
    
    # 50GB in bytes
    FIFTY_GB=$((50 * 1024 * 1024 * 1024))
    
    if [ "$DATASTORE_SIZE_BYTES" -lt "$FIFTY_GB" ]; then
      echo -e "${YELLOW}Datastore is less than 50GB, copying all files...${NC}"
      cp -r "$DATASTORE_TARGET"/* datastore/ 2>/dev/null || true
    else
      echo -e "${YELLOW}Datastore is larger than 50GB, copying files smaller than 100MB...${NC}"
      
      # Copy directory structure first
      find "$DATASTORE_TARGET" -type d | while read -r dir; do
        relative_dir="${dir#$DATASTORE_TARGET}"
        mkdir -p "datastore/$relative_dir"
      done
      
      # Copy files smaller than 100MB
      find "$DATASTORE_TARGET" -type f -size -100M | while read -r file; do
        relative_path="${file#$DATASTORE_TARGET}"
        cp "$file" "datastore/$relative_path" 2>/dev/null || true
      done
      
      # Find and list large files
      echo -e "\n${YELLOW}Large files (>100MB) not copied:${NC}"
      LARGE_FILES=$(find "$DATASTORE_TARGET" -type f -size +100M -exec ls -lh {} \; | awk '{print $5 "\t" $9}')
      
      if [ -n "$LARGE_FILES" ]; then
        echo "$LARGE_FILES"
        echo -e "\n${YELLOW}Do you need any of these large files? (y/n)${NC}"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
          echo "Please manually copy the files you need to the datastore directory"
          echo "Press Enter when done..."
          read -r
        fi
      fi
    fi
  else
    echo -e "${RED}Warning: Datastore target not found at $DATASTORE_TARGET${NC}"
    echo "Continuing with empty datastore..."
  fi
  
  # Step 4: Already at repo root
  
  # Step 5: Create temporary branch
  echo -e "${YELLOW}Creating temporary branch...${NC}"
  
  # Find next available branch number
  BRANCH_NUM=1
  while git show-ref --verify --quiet "refs/heads/temp/claude-risky-run_$BRANCH_NUM"; do
    ((BRANCH_NUM++))
  done
  
  BRANCH_NAME="temp/claude-risky-run_$BRANCH_NUM"
  git checkout -b "$BRANCH_NAME"
  echo -e "${GREEN}Created and switched to branch: $BRANCH_NAME${NC}"
  
  # Step 6: Run Claude
  echo -e "\n${GREEN}Setup complete! Running Claude...${NC}"
  echo -e "${YELLOW}Note: Your data is now sandboxed in the local datastore directory${NC}"
  echo -e "${YELLOW}Original datastore location: $DATASTORE_TARGET${NC}"
  echo -e "\n"
  
  claude --dangerously-skip-permissions

description: Sandbox datastore and run Claude with dangerous permissions
tags:
  - claude
  - git
  - data
arguments:
  - name: repo
    description: Repository name (optional - will auto-detect if in a repo)
    default_value: ""
source_url: null
author: Max Miller
author_url: null
shells: []
is_pinned: false
